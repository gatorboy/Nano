apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        applicationId "com.smenedi.nano"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"


        //host config
        buildConfigField "String", "SERVICE_HOST_SCHEME", '"https"'
        buildConfigField "String", "IMAGE_HOST_SCHEME", '"http"'
        buildConfigField "String", "SERVICE_HOST", '"api.themoviedb.org"'
        buildConfigField "String", "IMAGE_HOST", '"image.tmdb.org"'
        buildConfigField "String", "API_KEY", '"e56dec55b5f170c0ffd1fee29b8a994d"'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:recyclerview-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'



    //third party dependencies
    compile 'com.jakewharton:butterknife:7.0.1' // clean code for binding views
    compile 'com.facebook.fresco:fresco:0.7.0' //for image caching and loading
    compile 'de.greenrobot:eventbus:2.4.0' // Event bus library for decoupling components


    debugCompile 'com.facebook.stetho:stetho:1.2.0'

}

apply plugin: 'pmd'
task pmd(type: Pmd) {

    ruleSetFiles = files("$projectDir/config/pmd/pmd_rules.xml")
    ignoreFailures = false
    ruleSets = []

    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/pmd/pmd.xml"
        }
        html {
            destination "$project.buildDir/reports/pmd/pmd.html"
        }
    }
}


apply plugin: "findbugs"
task findbugs(type: FindBugs) {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("$projectDir/config/findbugs/findbugs-exclude-filter.xml")
    classes = files("$projectDir/build/intermediates/classes/debug")

    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'


    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"
        }
    }

    classpath = files()
}


apply plugin: 'checkstyle'
task checkstyle(type: Checkstyle) {
    configFile file("$projectDir/config/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

task checkstyleReport << {

    if (file("$buildDir/reports/checkstyle/checkstyle.xml").exists()) {
        ant.xslt(in: "$project.buildDir/reports/checkstyle/checkstyle.xml",
                style: "$projectDir/config/checkstyle/checkstyle.xsl",
                out: "$project.buildDir/reports/checkstyle/checkstyle.html"
        )
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        if (task.name in ['checkstyle', 'checkstyleTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyle(.*)$/
                if (matcher.matches()) {
                    project.ext.set("checkType", matcher.group(1).toLowerCase())
                }
            }
            checkstyleReport.execute()
        }
    }
}

// Add checkstyle, findbugs, pmd and lint to the check task.
check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'






